* slide-02
npm create vite axios-test-app  --  --template react-swc
cd axios-test-app
npm install
npm install axios

--------------------------------------------

import axios from 'axios'

const requestAPI = () => {
  const url = "http://localhost:8080/todolist/gdhong";
  axios.get(url).then((response) => {
     console.log("# 응답 객체 : ", response);
  });
};
requestAPI();

......(나머지 코드 생략)



* slide-03
import './App.css'
import axios from 'axios'

const listUrl = "/api/todolist_long/gdhong";
const todoUrlPrefix = "/api/todolist_long/gdhong/";

//4건의 목록을 조회한 후 첫번째 할일만 한번 더 조회합니다.
const requestAPI = () => {
  let todoList = [];
  axios
    .get(listUrl)
    .then((response) => {
      todoList = response.data;
      console.log("# TodoList : ", todoList);
      return todoList[0].id;
    })
    .then((id) => {
      return axios.get(todoUrlPrefix + id);
    })
    .then((response) => {
      console.log("## 첫번째 Todo : ", response.data);
      return todoList[1].id;
    })
    .then((id) => {
      axios.get(todoUrlPrefix + id).then((response) => {
        console.log("## 두번째 Todo : ", response.data);
      });
    });
};
requestAPI();

const App = () => {
  return <h2>Console.log를 확인하세요</h2>;
};

export default App;


* slide-05

//App3.jsx
import axios from "axios";

const listUrl = "/api/todolist_long/gdhong";
const todoUrlPrefix = "/api/todolist_long/gdhong/";

//4건의 목록 조회후 한건씩 순차적으로 순회하며 조회하기
const requestAPI = async () => {
  let todo;
  let todoList;

  let response = await axios.get(listUrl);
  todoList = response.data;
  console.log("# TodoList : ", todoList);
  response = await axios.get(todoUrlPrefix + todoList[0].id);
  console.log("## 첫번째 Todo : ", response.data);

  response = await axios.get(todoUrlPrefix + todoList[1].id);
  console.log("## 두번째 Todo : ", response.data);
};

requestAPI();

const App = (props) => {
  return <h2>Console.log를 확인하세요</h2>;
};

export default App;



* slide-06
//4건의 목록을 조회한 후 한건씩 순차적으로 순회하며 조회하기
const requestAPI = async () => {
    let todoList;

    let response = await axios.get(listUrl);
    todoList = response.data;
    console.log("# TodoList : ", todoList);
    for (let i = 0; i < todoList.length; i++) {
      response = await axios.get(todoUrlPrefix + todoList[i].id);
      console.log(`# ${i + 1}번째 Todo : `, response.data);
    }
};



* slide-07
//App3.jsx
import axios from "axios";

const listUrl = "/api/todolist_long/gdhong";
const todoUrlPrefix = "/api/todolist_long/gdhong/";

//4건의 목록을 조회한 후 한건씩 순차적으로 순회하며 조회하기
const requestAPI = async () => {
  let todoList;

  try {
    let response = await axios.get(listUrl);
    todoList = response.data;
    console.log("# TodoList : ", todoList);
    for (let i = 0; i < todoList.length; i++) {
      response = await axios.get(todoUrlPrefix + todoList[i].id);
      console.log(`# ${i + 1}번째 Todo : `, response.data);
    }
  } catch (e) {
    if (e instanceof Error) console.log(e.message);
    else console.log(e);
  }
};

requestAPI();

const App = (props) => {
  return <h2>Console.log를 확인하세요</h2>;
};

export default App;



* slide-09

//App4.jsx
import axios from "axios";
import React from "react";

const requestAPI = async () => {
  const url = "/api/todolist/gdhong";
  const response = await axios.get(url);
  console.log("# 응답객체 : ", response);
};
requestAPI();

const App4 = (props) => {
  return <h2>Console Log를 확인합니다.</h2>;
};

export default App4;



* slide-11
//App5.jsx
import axios from "axios";

const requestAPI = async () => {
  const url = "/api/todolist_long/gdhong";
  let data = { todo: "윗몸일으키기 3세트", desc: "너무 빠르지 않게..." };
  const resp1 = await axios.post(url, data);
  console.log(resp1.data);
};
requestAPI();

const App5 = (props) => {
  return <h2>Console Log를 확인합니다.</h2>;
};

export default App5;



* slide-14
npm create vite contacts-client  --  --template react-swc
cd contacts-client 
npm install
npm install axios react-router react-router-dom



* slide-15
body { margin:20px; }


* slide-16
import axios from "axios";
import { useState } from "react";

axios.defaults.baseURL = "http://localhost:8080";
const useFetch = (url, params) => {
    const [response, setResponse] = useState();
    const [error, setError] = useState();
    const [isLoading, setIsLoading] = useState(false);
  
    const fetchData = async () => {
      setResponse(undefined);
      setError(undefined);
      setIsLoading(true);
      try {
        const result = await axios.get(url, params);
        setResponse(result);
      } catch (err) {
        setError(err);
      } finally {
        setIsLoading(false);
      }
    };
  
    return { response, error, isLoading, fetchData };
};

const usePost = (url, params) => {
    const [response, setResponse] = useState();
    const [error, setError] = useState();
    const [isProcessing, setIsProcessing] = useState(false);
  
    const postData = async (data, callback) => {
      setResponse(undefined);
      setError(undefined);
      setIsProcessing(true);
      try {
        const result = await axios.post(url, data, params);
        setResponse(result);
      } catch (err) {
        setError(err);
      } finally {
        setIsProcessing(false);
        callback();
        setTimeout(()=>{
          setResponse(undefined);
          setError(undefined);
        }, 3000);
      }
    };
  
    return { response, error, isProcessing, postData };
};

export { useFetch, usePost };



* slide-19
import ContactList from "./ContactList"
import InputContact from "./InputContact"
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";

const App = () => {
  return (
    <div>
      <Router>
        <h2> Custom Hook을 이용한 HTTP 요청 예제</h2>
        <hr />
        <Link to="/">연락처 목록</Link>&nbsp;
        <Link to="/add">연락처 추가</Link>
        <hr />
        <Routes>
          <Route path="/" element={<ContactList />} />
          <Route path="/add" element={<InputContact />} />
        </Routes>
      </Router>
    </div>
  )
}

export default App



* slide-19
import { useEffect } from "react";
import { useFetch } from "./hooks/useAxios";

const ContactList = () => {

  const { response, isLoading, error, fetchData } = useFetch(
    `/contacts`,
    { timeout: 10000 }
  );

  useEffect(()=>{
    fetchData();
  }, [])
  
  return (
    <div>
      <ul>
        {error ? (
          <h3>에러 발생 : {error.message}</h3>
        ) : response ? (
          response.data.contacts.map((item) => {
            return (
              <li key={item.no}>
                {item.name} : {item.tel} : {item.address}{" "}
              </li>
            );
          })
        ) : (
          ""
        )}
      </ul>
      {isLoading ? <h3>조회중</h3> : ""}
    </div>
  );
};

export default ContactList;



* slide-20
import { useState } from "react";
import { usePost } from "./hooks/useAxios";
import { useNavigate } from "react-router";

const InputContact = () => {
  const [name, setName] = useState("");
  const [tel, setTel] = useState("");
  const [address, setAddress] = useState("");
  const navigate=  useNavigate();

  const { response, isProcessing, error, postData } = usePost(
    "/contacts", 
    { timeout: 10000 }
  );

 const addContactHandler = () => {
    if (!name || name.length < 2 || !tel || !address) {
      alert("name은 두글자 이상, tel, address 를 반드시 입력해주세요.");
      return;
    }
    const data = { name, tel, address };
    postData(data, ()=> {
      navigate("/");
    });
  };
  
  return (
    <div>
      이름 :{" "}
      <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
      <br />
      전화 :{" "}
      <input type="text" value={tel} onChange={(e) => setTel(e.target.value)} />
      <br />
      주소 :{" "}
      <input type="text" value={address} onChange={(e) => setAddress(e.target.value)} />
      <br /><br />
      <button onClick={addContactHandler}>연락처 추가</button>
      <br />
      {error ? (
        <h3>에러 발생 : {error.message}</h3>
      ) : response ? (
        <h3>{response.data.message}</h3>
      ) : (
        ""
      )}
      {isProcessing ? <h3>처리중</h3> : ""}
    </div>
  );
};

export default InputContact;

  

  



































